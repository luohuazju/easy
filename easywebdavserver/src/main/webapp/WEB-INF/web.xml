<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
	<display-name>WebDAV Server</display-name>

	<listener>
		<!-- Releases all Derby resources when the webapp is undeployed. -->
		<listener-class>
			org.apache.jackrabbit.j2ee.DerbyShutdown
		</listener-class>
	</listener>
	
	<!-- ====================================================================== -->
    <!-- R E P O S I T O R Y   S T A R T U P  S E R V L E T                     -->
    <!-- ====================================================================== -->
    <servlet>
        <servlet-name>RepositoryStartup</servlet-name>
        <description>
            Repository servlet that starts the repository and registers it to JNDI ans RMI.
            If you already have the repository registered in this appservers JNDI context,
            or if its accessible via RMI, you do not need to use this servlet.
        </description>
        <servlet-class>org.apache.jackrabbit.j2ee.RepositoryStartupServlet</servlet-class>

        <init-param>
            <param-name>bootstrap-config</param-name>
            <param-value>/bootstrap.properties</param-value>
            <description>
                Property file that hold the same initialization properties than
                the init-params below. If a parameter is specified in both
                places the one in the bootstrap-config wins.
            </description>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

	<!-- ====================================================================== -->
	<!-- R E P O S I T O R Y S E R V L E T -->
	<!-- ====================================================================== -->
	<servlet>
		<servlet-name>Repository</servlet-name>
		<description>
			This servlet provides other servlets and jsps a common way to access
			the repository. The repository can be accessed via JNDI, RMI or Webdav.
		</description>
		<servlet-class>org.apache.jackrabbit.j2ee.RepositoryAccessServlet</servlet-class>

		<init-param>
			<param-name>bootstrap-config</param-name>
			<param-value>/bootstrap.properties</param-value>
			<description>
				Property file that hold the same initialization properties than
				the init-params below. If a parameter is specified in both
				places the one in the bootstrap-config wins.
			</description>
		</init-param>
		<init-param>
          <param-name>repository.context.attribute.name</param-name>
          <param-value>sillycat.Repository</param-value>
          <description>
            If this is set, the RepositoryAccessServlet expects a Repository in the ServletContext 
            attribute having this name. This allows servlets of this module to be used with repositories
            initialized by the jackrabbit-jcr-servlet module utilities.
          </description>
        </init-param>
		<load-on-startup>3</load-on-startup>
	</servlet>

	<!-- ====================================================================== -->
	<!-- J C R R E M O T I N G S E R V L E T -->
	<!-- ====================================================================== -->
	<servlet>
		<servlet-name>JCRWebdavServer</servlet-name>
		<description>
			The servlet used to remote JCR calls over HTTP.
		</description>
		<servlet-class>org.apache.jackrabbit.j2ee.JcrRemotingServlet</servlet-class>
		<init-param>
			<param-name>missing-auth-mapping</param-name>
			<param-value></param-value>
			<description>
				Defines how a missing authorization header should be handled.
				1) If this init-param is missing, a 401 response is generated.
				This is suitable for clients (eg. webdav clients) for which
				sending a proper authorization header is not possible if the
				server never sent a 401.
				2) If this init-param is present with an empty value,
				null-credentials are returned, thus forcing an null login
				on the repository.
				3) If this init-param is present with the value 'guestcredentials'
				java.jcr.GuestCredentials are used to login to the repository.
				4) If this init-param has a 'user:password' value, the respective
				simple credentials are generated.
			</description>
		</init-param>
		<init-param>
			<param-name>resource-path-prefix</param-name>
			<param-value>/sillycat</param-value>
			<description>
				defines the prefix for spooling resources out of the repository.
			</description>
		</init-param>
		<!-- Init parameters specific for JcrRemotingServlet -->
		<!-- <init-param> <param-name>home</param-name> <param-value></param-value> 
			<description>JcrRemotingServlet: Optional home directory for JcrRemotingServlet 
			temporary files (default: "jackrabbit")</description> </init-param> <init-param> 
			<param-name>temp-directory</param-name> <param-value></param-value> <description>JcrRemotingServlet: 
			Optional temporary directory name (under home, default: "tmp")</description> 
			</init-param> -->
		<init-param>
			<param-name>batchread-config</param-name>
			<param-value>/WEB-INF/batchread.properties</param-value>
			<description>JcrRemotingServlet: Optional mapping from node type
				names to default depth.</description>
		</init-param>
		<!-- init-param> <param-name>concurrency-level</param-name> <param-value>50</param-value> 
			<description>Number of concurrent requests expected. Default value is 50.</description> 
			</init-param -->
		<load-on-startup>5</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>JCRWebdavServer</servlet-name>
		<url-pattern>/sillycat/*</url-pattern>
	</servlet-mapping>

</web-app>
