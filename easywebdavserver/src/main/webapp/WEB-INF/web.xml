<!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" >

<web-app>
	<display-name>WebDAV Server</display-name>

	<listener>
		<!-- Releases all Derby resources when the webapp is undeployed. -->
		<listener-class>
			org.apache.jackrabbit.j2ee.DerbyShutdown
		</listener-class>
	</listener>
	
	<!-- ====================================================================== -->
    <!-- R E P O S I T O R Y   S T A R T U P  S E R V L E T                     -->
    <!-- ====================================================================== -->
    <servlet>
        <servlet-name>RepositoryStartup</servlet-name>
        <description>
            Repository servlet that starts the repository and registers it to JNDI ans RMI.
            If you already have the repository registered in this appservers JNDI context,
            or if its accessible via RMI, you do not need to use this servlet.
        </description>
        <servlet-class>org.apache.jackrabbit.j2ee.RepositoryStartupServlet</servlet-class>

        <init-param>
            <param-name>bootstrap-config</param-name>
            <param-value>/bootstrap.properties</param-value>
            <description>
                Property file that hold the same initialization properties than
                the init-params below. If a parameter is specified in both
                places the one in the bootstrap-config wins.
            </description>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

	<!-- ====================================================================== -->
	<!-- R E P O S I T O R Y S E R V L E T -->
	<!-- ====================================================================== -->
	<servlet>
		<servlet-name>Repository</servlet-name>
		<description>
			This servlet provides other servlets and jsps a common way to access
			the repository. The repository can be accessed via JNDI, RMI or Webdav.
		</description>
		<servlet-class>org.apache.jackrabbit.j2ee.RepositoryAccessServlet</servlet-class>

		<init-param>
			<param-name>bootstrap-config</param-name>
			<param-value>/bootstrap.properties</param-value>
			<description>
				Property file that hold the same initialization properties than
				the init-params below. If a parameter is specified in both
				places the one in the bootstrap-config wins.
			</description>
		</init-param>
		<init-param>
          <param-name>repository.context.attribute.name</param-name>
          <param-value>sillycat.Repository</param-value>
          <description>
            If this is set, the RepositoryAccessServlet expects a Repository in the ServletContext 
            attribute having this name. This allows servlets of this module to be used with repositories
            initialized by the jackrabbit-jcr-servlet module utilities.
          </description>
        </init-param>
		<load-on-startup>3</load-on-startup>
	</servlet>
	
	<!-- ====================================================================== -->
    <!-- W E B D A V  S E R V L E T                                              -->
    <!-- ====================================================================== -->
    <servlet>
        <servlet-name>Webdav</servlet-name>
        <description>
            The webdav servlet that connects HTTP request to the repository.
        </description>
        <servlet-class>org.apache.jackrabbit.j2ee.CustomerSimpleWebdavServlet</servlet-class>

        <init-param>
            <param-name>resource-path-prefix</param-name>
            <param-value>/repository</param-value>
            <description>
                defines the prefix for spooling resources out of the repository.
            </description>
        </init-param>
         <init-param>
             <param-name>missing-auth-mapping</param-name>
             <param-value>admin:admin</param-value>
             <description>
                 Defines how a missing authorization header should be handled.
                 1) If this init-param is missing, a 401 response is generated.
                    This is suitable for clients (eg. webdav clients) for which
                    sending a proper authorization header is not possible if the
                    server never sent a 401.
                 2) If this init-param is present with an empty value,
                    null-credentials are returned, thus forcing an null login
                    on the repository.
                 3) If this init-param is present with the value 'guestcredentials'
                    java.jcr.GuestCredentials are used to login to the repository.
                 4) If this init-param has a 'user:password' value, the respective
                    simple credentials are generated.
             </description>
         </init-param>
        <!--
            Optional parameter to define the value of the 'WWW-Authenticate' header
        -->
        <!--
        <init-param>
            <param-name>authenticate-header</param-name>
            <param-value>Basic realm="Jackrabbit Webdav Server"</param-value>
            <description>
                Defines the value of the 'WWW-Authenticate' header.
            </description>
        </init-param>
        -->
        <!--
            Parameter used to configure behaviour of webdav resources such as:
            - distinction between collections and non-collections
            - resource filtering
        -->
        <init-param>
            <param-name>resource-config</param-name>
            <param-value>/WEB-INF/config.xml</param-value>
            <description>
                Defines various dav-resource configuration parameters.
            </description>
        </init-param>
       <!--
            Optional parameter to define the behaviour of the referrer-based CSRF protection
        -->
        <!--
        <init-param>
            <param-name>csrf-protection</param-name>
            <param-value>host1.domain.com,host2.domain.org</param-value>
            <description>
                Defines the behaviour of the referrer based CSRF protection
                1) If omitted or left empty the (default) behaviour is to allow only requests with
                   an empty referrer header or a referrer host equal to the server host
                2) May also contain a comma separated list of additional allowed referrer hosts
                3) If set to 'disabled' no referrer checking will be performed at all
            </description>
        </init-param>
        -->
        <load-on-startup>4</load-on-startup>
    </servlet>
    
    <servlet>
		<servlet-name>tomcatWebDAV</servlet-name>
		<servlet-class>com.sillycat.easywebdavserver.servlets.CustomerWebdavServlet</servlet-class>
		<init-param>
			<param-name>debug</param-name>
			<param-value>0</param-value>
		</init-param>
		<init-param>
			<param-name>listings</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>readonly</param-name>
			<param-value>false</param-value>
		</init-param>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>tomcatWebDAV</servlet-name>
		<url-pattern>/sillycat/*</url-pattern>
	</servlet-mapping>
    

	 <servlet-mapping>
        <servlet-name>Webdav</servlet-name>
        <url-pattern>/repository/*</url-pattern>
    </servlet-mapping>

</web-app>
