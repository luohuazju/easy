build.env = "local"
build.env = ${?env}

server {
	address = "0.0.0.0"
    port = 9001
}

cp {
  minPoolSize=2
  acquireIncrement=2
  maxPoolSize=250
  maxIdleTime=28800
  testConnectionOnCheckout=true
  preferredTestQuery="select 1"
}

environment {
	test {
		server {
			address = "0.0.0.0"
    		port = 9001
		}
	}
	local {
		server {
			address = "0.0.0.0"
    		port = 9002
		}
	}
	
	test {
            db.driver = org.h2.Driver
            db.url = "jdbc:h2:mem:winnersellerserver_test;DB_CLOSE_DELAY=-1"
            db.user = sa
            db.password = password

            cp = ${cp}
            cp.maxPoolSize=25
    }
    
    local {
            db.driver = org.h2.Driver
            db.url = "jdbc:h2:~/winnersellerserver_app;DB_CLOSE_DELAY=-1"
            db.user = sa
            db.password = password

            cp = ${cp}
            cp.maxPoolSize=25
    }
    
//	local {
//           db.driver = com.mysql.jdbc.Driver
//           db.url="jdbc:mysql://localhost:3306/test"
//           db.user="root"
//           db.password="kaishi"
//           cp=${cp}
//           cp.maxPoolSize=25
//    }
    
}

akka {
  loglevel = ERROR
}

spray {
  compact-json-printing = true
}

#spray.can.server {
#  request-timeout = 50s
#}

#spray.can.client {
#  idle-timeout = 60 s
#  request-timeout = 30 s
#}

spray.can {
  client {
	idle-timeout = 60 s
    request-timeout = 30 s
  }
}

spray.client {
  # the maximum number of parallel connections that an HttpConduit
  # is allowed to establish to a host, must be greater than zero
  max-connections = 4

  # the maximum number of retries an HttpConduit will attempt before
  # giving up and returning an error
  max-retries = 5

  # if this setting is enabled, the HttpConduit will log warnings for
  # all illegal response headers coming back from a target server
  warn-on-illegal-headers = on
}

